#!/usr/bin/env python3
import os
import sys
import subprocess
import difflib

def printf (fmt, *args, color=""):
  fmt = fmt.replace ("{}", "\x1b[1m{}\x1b[22m")
  print (color + fmt.format (*args) + "\x1b[0m")


def print_show_special (string, stream=sys.stdout):
  for c in string:
    if not c.isprintable ():
      stream.write (f"\x1b[2m\\x{ord (c):0>2x}\x1b[22m")
    elif c == ' ':
      stream.write ("\x1b[2m.\x1b[22m")
    else:
      stream.write (c)


def diff (a, b):
  for line in difflib.ndiff (a.split ('\n'), b.split ('\n')):
    if line[0] == '-':
      sys.stdout.write ("\x1b[31m")
    elif line[0] == '+':
      sys.stdout.write ("\x1b[32m")
    sys.stdout.write ("  ")
    if line[0] == '?':
      sys.stdout.write (line)
    else:
      sys.stdout.write (line[:2])
      print_show_special (line[2:])
    sys.stdout.write ("\x1b[0m\n")


def run_command(test, use_valgrind):
  if use_valgrind:
    program = os.path.join(os.getcwd(), test) + ".exe"
    return (
      "valgrind",
      "-q",
      "--leak-check=full",
      "--track-fds=yes",
      "--track-origins=yes",
      "--show-leak-kinds=all",
      program,
    )
  else:
    return (f"./{test}.exe",)


def main ():
  use_valgrind = "-vg" in sys.argv
  tests = [i for i in sys.argv[1:] if i[0] != '-']

  os.chdir ("tests")
  if not tests:
    tests = [
        f[:-4] for f in os.listdir ()
      if f.endswith (".exe") and not os.path.isdir (f)
    ]

  for test in tests:
    expected_file = test + ".expected"
    if not os.path.exists (expected_file):
      printf ("Missing file {}, skipping test {}", expected_file, test,
              color="\x1b[33m")
      continue
    printf ("Running: {}", test, color="\x1b[32m")
    p = subprocess.run(run_command(test, use_valgrind), stdout=subprocess.PIPE)
    output = p.stdout.decode ("utf-8").strip ()
    if os.name == "nt":
      output = output.replace ("\r\n", '\n')
    expected = open (expected_file).read ().strip ()
    if output != expected:
      printf ("Failed: {}", test, color="\x1b[31m")
      diff (expected, output)


if __name__ == "__main__":
  main ()
